# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
    web:
        build: ./initBase
        command: gunicorn initBase.wsgi --reload --bind 0.0.0.0:8000
        volumes:
            - static_volume:/initBase/static/
            - migrations_volume:/initBase/userManagement/migrations
            - media_volume:/initBase/media/
        develop:
            watch:
                - path: ./initBase/requirements.txt
                  action: rebuild

                - path: ./initBase/
                  target: /initBase
                  action: sync
                  ignore:
                      - ./initBase/usercontrol/migrations

        ports:
            - 8000:8000
            # The commented out section below is an example of how to define a PostgreSQL
            # database that your application can use. `depends_on` tells Docker Compose to
            # start the database before your application. The `db-data` volume persists the
            # database data between container restarts. The `db-password` secret is used
            # to set the database password. You must create `db/password.txt` and add
            # a password of your choosing to it before running `docker compose up`.
            # condition: service_healthy
        depends_on:
            - db

    db:
        image: postgres
        restart: always
        # user: postgres
        #     secrets:
        #       - db-password
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: dbapiuser
            POSTGRES_DB: initBase
            POSTGRES_PASSWORD: param
        #     expose:
        #       - 5432
        # healthcheck:
        #     test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
        #     interval: 10s
        #     timeout: 5s
        #     retries: 5
        # volumes:
        #   db-data:
        # secrets:
        #   db-password:
        #     file: db/password.txt
volumes:
    pgdata:
    static_volume:
    migrations_volume:
    media_volume:
